name: Python Dependency Security Audit and Outdated Packages Check

on:
  push:
    branches:
      - main
      - master
      - test
  pull_request:
    branches:
      - main
      - master

jobs:
  Python-check:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'  # Adjust to your project's Python version

    - name: Cache pip dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-dependencies-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-dependencies-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install pip-audit
      run: pip install pip-audit

    - name: Run pip-audit
      run: pip-audit -r requirements.txt  # Adjust if using other lock files like Pipfile.lock or poetry.lock

    - name: Fail the build if vulnerabilities found
      run: |
        pip-audit -r requirements.txt || exit 1  # Exit with code 1 if vulnerabilities are found

    - name: Check for outdated packages
      run: |
        echo "Checking for outdated packages..."
        pip list --outdated || true  # Prints outdated packages; || true ensures the job doesn't fail

    - name: Fail if any outdated packages are found
      run: |
        OUTDATED=$(pip list --outdated --format=freeze)
        if [ -n "$OUTDATED" ]; then
          echo "Outdated packages detected!"
          echo "$OUTDATED"
          exit 1
        else
          echo "No outdated packages found."
        fi
