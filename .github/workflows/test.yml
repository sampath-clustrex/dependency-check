name: Dependency and Vulnerability Check

on:
  pull_request:
    branches:
      - main
      - master
  push:
    branches:
      - main
      - master
      - test

jobs:
  security:
    env:
      SECRET_API_KEY: '81919e15-f76a-4b4e-a0cf-aa27f74a31b1'
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-review safety

      # Check Python outdated packages
      - name: Check Python outdated packages
        run: |
          pip-review --local --outdated > python_outdated.txt || true
          cat python_outdated.txt
          if [ -s python_outdated.txt ]; then
            echo "Outdated Python packages detected with latest versions available:"
            cat python_outdated.txt
          else
            echo "All Python packages are up to date."
          fi

      # Check Python vulnerabilities
      - name: Run Safety CLI to check for vulnerabilities
        uses: pyupio/safety-action@v1
        with:
          api-key: $env.SAFETY_API_KEY
          output-format: json
          args: --detailed-output # To always see detailed output from this action
        
      - name: Safety check Complete
        run: |
          echo "Python vulnerability scan completed."

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'  # Specifying Node.js LTS version directly

      - name: Install npm tools
        run: |
          npm install -g npm-check-updates

      # Generate package-lock.json if it doesn't exist
      - name: Ensure package-lock.json exists
        run: |
          npm install --package-lock-only || true  # Ensures package-lock.json is created if missing

      # Check JavaScript outdated packages
      - name: Check JavaScript outdated packages
        run: |
          ncu --upgrade --jsonUpgraded > js_outdated.json || true
          cat js_outdated.json
          if [ -s js_outdated.json ]; then
            echo "Outdated JavaScript packages detected with latest versions available:"
            cat js_outdated.json
          else
            echo "All JavaScript packages are up to date."
          fi

      
      - name: Check JavaScript vulnerabilities
        run: |
          # Run npm audit and save the results in JSON format
          npm audit --json > npm_audit.json || true
            
          # Print the audit summary
          echo "Vulnerability Audit Summary:"
        
          # Parse and format the audit report using jq
          cat npm_audit.json | jq -r '
            .vulnerabilities | to_entries[] | 
            {
              name: .value.name,
              severity: .value.severity,
              title: .value.via[0].title,
              url: .value.via[0].url,
              fixAvailable: .value.fixAvailable,
              range: .value.range
            } | 
            "Package: \(.name)\nSeverity: \(.severity)\nTitle: \(.title)\nURL: \(.url)\nFix Available: \(.fixAvailable)\nAffected Range: \(.range)\n"'
        
